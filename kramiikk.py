import asyncio
import logging
import re
import random
from datetime import timedelta

from telethon import events

from .. import loader

logger = logging.getLogger(__name__)


@loader.tds
class KramiikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è."""

    strings = {"name": "kramiikk"}

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.su = self.db.get("Su", "su", {})
        self.me = await client.get_me()

    async def err(self, chat, p):
        try:
            async with self.client.conversation(chat) as conv:
                global RSP
                RSP = await conv.wait_event(
                    events.NewMessage(from_users=1124824021, chats=chat, pattern=p)
                )
        except asyncio.exceptions.TimeoutError:
            pass

    async def bmj(self, chat):
        p = "üê∏"
        await self.err(chat, p)
        jab = re.search(r"–£—Ä.+: (\d+)[\s\S]*–ë—É.+: (\d+)", RSP.text)
        if "–ñ–∏–≤–∞—è" not in RSP.text:
            await self.client.send_message(chat, "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
        p = "üèÉ‚Äç‚ôÇÔ∏è"
        await self.client.send_message(chat, "<b>–∂–∞–±–∞ –∏–Ω—Ñ–æ</b>")
        await self.err(chat, p)
        cmn = "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ"
        if int(jab.group(1)) > 72 and int(jab.group(2)) > 3750:
            if (
                "–í –ø–æ–¥–∑–µ–º–µ–ª—å–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 2—á" in RSP.text
                and "–ñ–∞–±—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in RSP.text
            ):
                await self.client.send_message(chat, cmn)
            cmn = "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ"
            if "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è" in RSP.text:
                await self.client.send_message(chat, cmn)
            cmn = "–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É"
            if "(–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å)" in RSP.text:
                await self.client.send_message(chat, cmn)
        else:
            if "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in RSP.text:
                await self.client.send_message(chat, cmn)
            cmn = "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É"
            if "–ñ–∞–±—É –º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å" in RSP.text:
                await self.client.send_message(chat, cmn)
        cmn = "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"
        if "–í–∞—à–∞ –∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ" in RSP.text and int(jab.group(1)) > 100:
            cmn = "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç"
            await self.client.send_message(chat, cmn)
        elif "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã" in RSP.text:
            await self.client.send_message(chat, cmn)

    async def watcher(self, m):
        args = m.text
        if self.me.id in {547639600}:
            name = "–ù–µ–ª—å—Å"
        elif self.me.id in {980699009}:
            name = "–õ–µ–Ω–∞"
        elif self.me.id in {230473666}:
            name = "–í–∞–Ω—è"
        elif self.me.id in {887255479}:
            name = "–ö–∏—Ä–∞"
        else:
            name = self.me.first_name
        usrs = {1785723159, 1261343954}
        chat = m.chat_id
        if "name" in self.su:
            name = self.su["name"]
            usrs = self.su["users"]
        try:
            if (
                m.message.casefold().startswith("/my_toad")
                and m.sender_id == self.me.id
            ):
                await self.bmj(chat)
            elif (
                m.message.startswith((name, f"@{self.me.username}"))
                and "–∏–Ω—Ñ–æ" in m.message
                and m.sender_id in usrs
            ):
                await m.respond("<b>–º–æ—è –∂–∞–±–∞</b>")
                await self.bmj(chat)
            elif (
                "–ë–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏–ª–∞" in m.message
                or "–ô–æ—É, –≤–∞—à –∫–ª–∞–Ω" in m.message
                and m.sender_id in {1124824021}
            ):
                await self.client.send_message(
                    chat,
                    "–º–æ–π –∫–ª–∞–Ω",
                    schedule=timedelta(
                        minutes=random.randint(1, 30), seconds=random.randint(1, 30)
                    ),
                )
            elif "–º–æ–π –∫–ª–∞–Ω" in m.message and m.sender_id == self.me.id:
                p = "‚Ä¢"
                await self.client.send_message(chat, "<b>–º–æ–∏ –∂–∞–±—ã</b>")
                await self.err(chat, p)
                capt = re.findall(r"\| -100(\d+)", RSP.text)
                for i in capt:
                    chat = int(i)
                    await self.client.send_message(chat, "<b>–º–æ—è –∂–∞–±–∞</b>")
                    await self.bmj(chat)
            elif (m.message.startswith((name, f"@{self.me.username}"))) and (
                m.sender_id in usrs
            ):
                cmn = "<b>—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É</b>"
                reply = await m.get_reply_message()
                if "–Ω–∞–ø–∏—à–∏ –≤ " in m.message:
                    chat = args.split(" ", 4)[3]
                    if chat.isnumeric():
                        chat = int(chat)
                    s = args.split(" ", 4)[4]
                    if reply:
                        s = reply
                    await self.client.send_message(chat, s)
                elif "–Ω–∞–ø–∏—à–∏" in m.message:
                    mmsg = args.split(" ", 2)[2]
                    if reply:
                        await reply.reply(mmsg)
                    else:
                        await m.respond(mmsg)
                elif "–∞—Ä–µ–Ω–∞" in m.message:
                    chat = m.chat_id
                    p = "‚Ä¢"
                    await self.client.send_message(chat, "<b>–º–æ–∏ –∂–∞–±—ã</b>")
                    await self.err(chat, p)
                    capt = re.findall(r"\| -100(\d+)", RSP.text)
                    for i in capt:
                        chat = int(i)
                        await self.client.send_message(chat, cmn)
                        await self.client.send_message(chat, "<b>–Ω–∞ –∞—Ä–µ–Ω—É</b>")
                elif "—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ" in m.message:
                    p = "–í–∞—à–µ"
                    await m.respond("<b>–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</b>")
                    await self.err(chat, p)
                    if "–ü—É—Å—Ç–æ" in RSP.text:
                        await m.respond("<b>—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏</b>")
                        await m.respond("<b>—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç</b>")
                        await m.respond("<b>—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏</b>")
                        await m.respond("<b>—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏</b>")
                        await m.respond("<b>—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏</b>")
                else:
                    if ("–Ω–∞–ø–∞–¥–∏" or "–ø–æ–¥–∑–µ–º–µ–ª—å–µ") in m.message:
                        await m.respond(cmn)
                    i = args.split(" ", 1)[1]
                    if i in ded:
                        await m.reply(ded[i])
            elif (
                f"–°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç —Ö–æ–¥: {self.me.first_name}" in m.message and m.buttons
            ):
                await m.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                await m.click(0)
            elif m.message.startswith("su!") and m.sender_id == self.me.id:
                i = int(args.split(" ", 1)[1])
                if i == self.me.id and "name" not in self.su:
                    self.su.setdefault("name", name)
                    self.su.setdefault("users", [])
                    self.su["users"].append(i)
                    txt = f"üë∫ <code>{name}</code> <b>–∑–∞–ø–æ–º–Ω–∏—Ç–µ</b>"
                elif i in self.su["users"]:
                    self.su["users"].remove(i)
                    txt = f"üñïüèæ {i} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
                else:
                    self.su["users"].append(i)
                    txt = f"ü§ôüèæ {i} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
                self.db.set("Su", "su", self.su)
                await m.respond(txt)
            elif m.message.startswith("sn!") and m.sender_id == self.me.id:
                self.su["name"] = args.split(" ", 1)[1]
                await m.respond(
                    "üëª <code>" + self.su["name"] + "</code> <b>—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>"
                )
                self.db.set("Su", "su", self.su)
            else:
                return
        finally:
            return


ded = {
    "–≥–æ –∫–≤": "<b>–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É</b>",
    "–Ω–∞–ø–∞–¥–∏": "<b>–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω</b>",
    "–ø–æ–¥–∑–µ–º–µ–ª—å–µ": "<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ</b>",
    "–∫–∞—Ä—Ç—É": "<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É</b>",
    "—Ç—É—Å–∞": "<b>–∂–∞–±—É –Ω–∞ —Ç—É—Å—É</b>",
}

import asyncio
import logging
import random
import re
from datetime import timedelta

from telethon import events

from .. import loader, utils

logger = logging.getLogger(__name__)

ded = {
    "–ù—É–∂–Ω–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è": "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
    "–•–æ—Ä–æ—à–µ–µ": "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã 4",
    "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã": "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
    "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å": "–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É",
    "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å": "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É",
    "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
    "–∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
    "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å": "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ",
    "–ú–æ–∂–Ω–æ –Ω–∞ –∞—Ä–µ–Ω—É": "–Ω–∞ –∞—Ä–µ–Ω—É",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É": "–Ω–∞ –∞—Ä–µ–Ω—É",
    "–∑–æ–ª–æ—Ç–æ": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
    "–≥–æ –∫–≤": "–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É",
    "–Ω–∞–ø–∞–¥–∏": "–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω",
    "–∫–∞—Ä—Ç—É": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
    "—Ç—É—Å–∞": "–∂–∞–±—É –Ω–∞ —Ç—É—Å—É",
    "–ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏",
    "–î–∞–ª—å–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç",
    "–ù–∞–≥–æ–ª–æ–≤–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
    "–ù–∞–≥—Ä—É–¥–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
    "–ù–∞–ª–∞–ø–Ω–∏–∫–∏: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
    "–ë–∞–Ω–¥–∞: –ü—É—Å—Ç–æ": "–≤–∑—è—Ç—å –∂–∞–±—É",
}


@loader.tds
class KramiikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!"""

    strings = {"name": "Kramiikk"}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.su = db.get("Su", "su", {})
        self.sf = db.get("Su", "sf", {})
        self.me = await client.get_me()

    async def sacmd(self, m):
        if "auto" not in self.su:
            self.su.setdefault("auto", {})
            msg = "<b>–ê–≤—Ç–æ–∂–∞–±–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        else:
            self.su.pop("auto")
            msg = "<b>–ê–≤—Ç–æ–∂–∞–±–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        self.db.set("Su", "su", self.su)
        await utils.answer(m, msg)

    async def sfcmd(self, m):
        key = utils.get_args_raw(m)
        key = key.split(" / ")[0]
        val = key.split(" / ")[1]
        if key not in self.sf:
            self.sf.setdefault(key, val)
            msg = "<b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        else:
            self.sf.pop(key)
            msg = "<b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        self.db.set("Su", "sf", self.sf)
        await utils.answer(m, msg)

    async def sncmd(self, m):
        args = utils.get_args_raw(m)
        self.su["name"] = args.casefold()
        await utils.answer(
            m, "üëª <code>" + self.su["name"] + "</code> <b>—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>"
        )
        self.db.set("Su", "su", self.su)

    async def sucmd(self, m):
        args = utils.get_args_raw(m)
        txt = int(args)
        if txt == self.me.id and "name" not in self.su:
            self.su.setdefault("name", self.me.username)
            self.su.setdefault("users", [])
            self.su["users"].append(txt)
            msg = f"üë∫ <code>{self.me.username}</code> <b>–∑–∞–ø–æ–º–Ω–∏—Ç–µ</b>"
        elif txt in self.su["users"]:
            self.su["users"].remove(txt)
            msg = f"üñïüèæ {txt} <b>—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            self.su["users"].append(txt)
            msg = f"ü§ôüèæ {txt} <b>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        self.db.set("Su", "su", self.su)
        await utils.answer(m, msg)

    async def err(self, chat, pattern):
        try:
            async with self.client.conversation(chat) as conv:
                global RSP
                RSP = await conv.wait_event(
                    events.NewMessage(
                        from_users=1124824021, chats=chat, pattern=pattern
                    )
                )
            for i in (i for i in ded if i in RSP.text):
                try:
                    await self.client.send_message(chat, ded[i])
                finally:
                    pass
        except asyncio.exceptions.TimeoutError:
            pass

    async def bmj(self, chat):
        pattern = "üê∏"
        await self.err(chat, pattern)
        await self.client.send_message(chat, "–∂–∞–±–∞ –∏–Ω—Ñ–æ")
        pattern = "üèÉ‚Äç‚ôÇÔ∏è"
        await self.err(chat, pattern)
        if "—Ä–∞–±–æ—Ç—ã" in RSP.text:
            pattern = "–í–∞—à–µ"
            await self.client.send_message(chat, "–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ")
            await self.err(chat, pattern)

    async def watcher(self, m):
        args = m.text
        chat = m.chat_id
        me = self.me.id
        name = self.me.username
        users = me
        if "name" in self.su:
            name = self.su["name"]
            users = self.su["users"]
        try:
            if (
                m.message.startswith(("‚úÖ", "üìâ"))
                and m.sender_id in {1124824021}
                and "auto" in self.su
            ):
                await self.client.send_message(
                    1124824021,
                    "–º–æ–∏ –∂–∞–±—ã",
                    schedule=timedelta(
                        minutes=random.randint(13, 60), seconds=random.randint(1, 60)
                    ),
                )
            elif m.message.startswith("–º–æ–∏ –∂–∞–±—ã") and chat in {1124824021}:
                await m.delete()
                pattern = "‚Ä¢"
                await self.err(chat, pattern)
                await RSP.delete()
                await self.client.send_read_acknowledge(chat)
                capt = re.findall(r"\| -100(\d+)", RSP.text)
                for i in capt:
                    try:
                        chat = int(i)
                        await self.client.send_message(chat, "–º–æ—è –∂–∞–±–∞")
                        await self.bmj(chat)
                    finally:
                        pass
            elif m.message.casefold().startswith(name) and (m.sender_id in users):
                reply = await m.get_reply_message()
                if "–Ω–∞–ø–∏—à–∏ –≤ " in m.message:
                    chat = args.split(" ", 4)[3]
                    if chat.isnumeric():
                        chat = int(chat)
                    if reply:
                        msg = reply
                    else:
                        msg = args.split(" ", 4)[4]
                    await self.client.send_message(chat, msg)
                elif "–Ω–∞–ø–∏—à–∏" in m.message:
                    msg = args.split(" ", 2)[2]
                    if reply:
                        await reply.reply(msg)
                    else:
                        await m.respond(msg)
                else:
                    cmn = args.split(" ", 1)[1]
                    if cmn in ded:
                        await m.reply(ded[cmn])
            elif (
                f"–°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç —Ö–æ–¥: {self.me.first_name}" in m.message and m.buttons
            ):
                await m.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                await m.click(0)
            elif (
                not m.message.endswith(("[1üë¥üêù]", "[1ü¶†üêù]", "üëëüêù"))
                and m.buttons
                and m.sender_id in {830605725}
            ):
                await m.click(0)
            elif "–ù–ï–ó–ê–ß–Å–¢!" in m.message:
                args = [int(x) for x in m.text.split() if x.isnumeric()]
                delta = timedelta(hours=args[1], minutes=args[2], seconds=33)
                await self.client.send_message(
                    707693258, "<b>–§–∞—Ä–º–∞</b>", schedule=delta
                )
            else:
                for i in (i for i in self.sf if i in m.message):
                    try:
                        await self.client.send_message(chat, self.sf[i])
                    finally:
                        pass
        finally:
            return

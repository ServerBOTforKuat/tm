import asyncio
import random
import re
from datetime import timedelta

from telethon import events

from .. import loader, utils

ded = {
    "–ù—É–∂–Ω–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è": "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
    "–•–æ—Ä–æ—à–µ–µ": "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã 4",
    "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã": "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
    "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å": "–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É",
    "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å": "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É",
    "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
    "–∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
    "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å": "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É": "–Ω–∞ –∞—Ä–µ–Ω—É",
    "–∑–æ–ª–æ—Ç–æ": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
    "–≥–æ –∫–≤": "–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É",
    "–Ω–∞–ø–∞–¥–∏": "–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω",
    "–∫–∞—Ä—Ç—É": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
    "—Ç—É—Å–∞": "–∂–∞–±—É –Ω–∞ —Ç—É—Å—É",
    "–ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏",
    "–î–∞–ª—å–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç",
    "–ù–∞–≥–æ–ª–æ–≤–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
    "–ù–∞–≥—Ä—É–¥–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
    "–ù–∞–ª–∞–ø–Ω–∏–∫–∏: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
    "–ë–∞–Ω–¥–∞: –ü—É—Å—Ç–æ": "–≤–∑—è—Ç—å –∂–∞–±—É",
}


@loader.tds
class KramiikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!"""

    strings = {"name": "Kramiikk"}

    async def abj(self, chat, m):
        await m.delete()
        cmn = "–º–æ–∏ –∂–∞–±—ã"
        await self.err(chat, cmn)
        await self.client.send_read_acknowledge(m.chat_id)
        capt = re.findall(r"\| -100(\d+)", RSP.text)
        for i in capt:
            try:
                chat = int(i)
                await self.bmj(chat)
            finally:
                pass

    async def bbj(self, idu, m):
        if m.message.startswith(("‚úÖ", "üìâ")) and "auto" in self.su:
            await self.client.send_message(
                idu,
                "üíëüë©‚Äç‚ù§Ô∏è‚Äçüë®üë®‚Äç‚ù§Ô∏è‚Äçüë®üíë",
                schedule=timedelta(
                    minutes=random.randint(33, 55), seconds=random.randint(1, 60)
                ),
            )

    async def cbj(self, m, msg):
        if m.message.casefold().startswith(self.su["name"]):
            reply = await m.get_reply_message()
            if "–Ω–∞–ø–∏—à–∏ –≤ " in m.message:
                chat = msg.split(" ", 4)[3]
                if chat.isnumeric():
                    chat = int(chat)
                if reply:
                    msg = reply
                txt = msg.split(" ", 4)[4]
                return await self.client.send_message(chat, txt)
            if "–Ω–∞–ø–∏—à–∏" in m.message:
                txt = msg.split(" ", 2)[2]
                if reply:
                    await reply.reply(txt)
                await utils.answer(m, txt)
            else:
                cmn = msg.split(" ", 1)[1]
                if cmn in ded:
                    await m.reply(ded[cmn])

    async def dbj(self, m):
        if m.buttons:
            txt = "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É"
            await utils.answer(m, txt)
            await m.click(0)

    async def bmj(self, chat):
        """–∞–ª–≥–æ—Ä–∏—Ç–º –∂–∞–±–∞–±–æ—Ç–∞"""
        cmn = "–º–æ—è –∂–∞–±–∞"
        await self.err(chat, cmn)
        for i in (i for i in ded if i in RSP.text):
            await utils.answer(RSP, ded[i])
        jab = re.search(r"–£.+: (\d+)[\s\S]*–ë.+: (\d+)", RSP.text)
        cmn = "–∂–∞–±–∞ –∏–Ω—Ñ–æ"
        await self.err(chat, cmn)
        for i in (i for i in ded if i in RSP.text):
            if (
                int(jab.group(1)) < 123
                or (int(jab.group(1)) > 123 and int(jab.group(2)) < 3333)
            ) and i in ("–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å", "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è"):
                continue
            await utils.answer(RSP, ded[i])
        if int(jab.group(1)) > 123 and "—Ä–∞–±–æ—Ç—ã" in RSP.text:
            cmn = "–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"
            await self.err(chat, cmn)
            for i in (i for i in ded if i in RSP.text):
                await utils.answer(RSP, ded[i])

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.su = db.get("Su", "su", {})
        self.me = await client.get_me()
        if "name" not in self.su:
            self.su.setdefault("name", self.me.username)
            self.su.setdefault("users", [self.me.id])

    async def err(self, chat, cmn):
        """—Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∂–∞–±–∞–±–æ—Ç–∞"""
        async with self.client.conversation(chat, exclusive=False) as conv:
            try:
                msg = await conv.send_message(cmn)
                global RSP
                RSP = await conv.get_response()
            except asyncio.exceptions.TimeoutError:
                RSP = await self.client.get_messages(chat, search=" ")
            await conv.cancel_all()
            if chat not in [1403626354]:
                await msg.delete()
                await RSP.delete()

    async def sacmd(self, m):
        """–±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –∂–∞–±–∞–º–∏"""
        if "auto" not in self.su:
            self.su.setdefault("auto", {})
            msg = "<b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        else:
            self.su.pop("auto")
            msg = "<b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        self.db.set("Su", "su", self.su)
        await utils.answer(m, msg)

    async def sfcmd(self, m):
        """–¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã, –ø—Ä–∏–º–µ—Ä '—Ç–µ–∫—Å—Ç / –æ—Ç–≤–µ—Ç'"""
        chatid = str(m.chat_id)
        msg = utils.get_args_raw(m)
        key = msg.split(" / ")[0]
        if not msg:
            txt = ""
            for i in self.su[chatid]:
                txt += f"<b>‚Ä¢ {i}</b>\n"
            await utils.answer(m, f"<b>–§–∏–ª—å—Ç—Ä—ã: {len(self.su[chatid])}\n\n{txt}</b>")
        if chatid not in self.su:
            self.su.setdefault(chatid, {})
        if key not in self.su[chatid]:
            self.su[chatid].setdefault(key, msg.split(" / ")[1])
            msg = "<b>–¥–æ–±–∞–≤–ª–µ–Ω</b>"
        else:
            self.su[chatid].pop(key)
            msg = "<b>—É–¥–∞–ª–µ–Ω</b>"
        if self.su[chatid] == {}:
            self.su.pop(chatid)
        self.db.set("Su", "su", self.su)
        await utils.answer(m, msg)

    async def stcmd(self, m):
        """—Ñ–∏–ª—å—Ç—Ä –Ω–∞ —é–∑–µ—Ä–∞, –ø—Ä–∏–º–µ—Ä '–∏–¥ / —Ç–µ–∫—Å—Ç / –æ—Ç–≤–µ—Ç'"""
        chatid = str(m.chat_id)
        msg = utils.get_args_raw(m)
        idu = msg.split(" / ")[0]
        key = msg.split(" / ")[1]
        if chatid not in self.su:
            self.su.setdefault(chatid, {})
        if idu not in self.su[chatid]:
            self.su[chatid].setdefault(idu, {})
        if key not in self.su[chatid][idu]:
            self.su[chatid][idu].setdefault(key, msg.split(" / ")[2])
            msg = "<b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        else:
            self.su[chatid][idu].pop(msg.split(" / ")[0])
            msg = "<b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        self.db.set("Su", "su", self.su)
        await utils.answer(m, msg)

    async def sncmd(self, m):
        """–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        msg = utils.get_args_raw(m)
        txt = "db:\n"
        if not msg:
            for i in self.db:
                txt += f"\n‚Ä¢{i}"
            return await utils.answer(m, txt)
        if "db" in msg:
            key = msg.split(" ")[1]
            for i in self.db[key]:
                txt += f"\n‚Ä¢{i}"
            return await utils.answer(m, txt)
        self.su["name"] = msg.casefold()
        txt = "üëª <code>" + self.su["name"] + "</code> <b>—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>"
        await utils.answer(m, txt)
        self.db.set("Su", "su", self.su)

    async def sucmd(self, m):
        """–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫"""
        msg = utils.get_args_raw(m)
        if txt in self.su["users"]:
            txt = int(msg)
            self.su["users"].remove(txt)
            msg = f"üñïüèæ {txt} <b>—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            txt = int(msg)
            self.su["users"].append(txt)
            msg = f"ü§ôüèæ {txt} <b>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        self.db.set("Su", "su", self.su)
        await utils.answer(m, msg)

    async def watcher(self, m):
        msg = m.text
        chat = m.chat_id
        chatid = str(chat)
        idu = m.sender_id
        users = self.su["users"]
        fff = {
            "üíëüë©‚Äç‚ù§Ô∏è‚Äçüë®üë®‚Äç‚ù§Ô∏è‚Äçüë®üíë": self.abj(chat, m),
            "‚úÖ": self.bbj(idu, m),
            "üìâ": self.bbj(idu, m),
            self.su["name"]: self.cbj(m, msg),
            f"–°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç —Ö–æ–¥: {self.me.first_name}": self.dbj(m),
        }
        try:
            if idu in [1124824021] or idu in users:
                for i in (i for i in fff if i in m.message.casefold()):
                    return await fff[i]
            if chatid in self.su:
                idu = str(idu)
                if idu in self.su[chatid]:
                    for i in (i for i in self.su[chatid][idu] if i in m.message):
                        await utils.answer(m, self.su[chatid][idu][i])
                for i in (i for i in self.su[chatid] if i in m.message):
                    await utils.answer(m, self.su[chatid][i])
            return
        except Exception as e:
            return await self.client.send_message("me", f"Error:\n{' '.join(e.args)}")

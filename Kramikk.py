from math import floor
from html import escape
from random import choice
from asyncio import sleep
from .. import loader, utils
from datetime import timedelta
from urllib.parse import quote_plus
from telethon.tl.types import Message
from asyncio.exceptions import TimeoutError
from telethon import events, functions, types, sync
from telethon.tl.functions.users import GetFullUserRequest
from telethon.errors.rpcerrorlist import UsernameOccupiedError
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest
import asyncio, datetime, inspect, io, json, logging, os, time, random, re, requests

logger = logging.getLogger(__name__)
asl = [
    "–∂–∞–±–∞ –¥–Ω—è",
    "—Ç–æ–ø –∂–∞–±",
    "—Å–µ–∑–æ–Ω –∫–ª–∞–Ω–æ–≤",
]
types_of = [
    "femdom",
    "tickle",
    "classic",
    "ngif",
    "erofeet",
    "meow",
    "erok",
    "poke",
    "les",
    "hololewd",
    "lewdk",
    "keta",
    "feetg",
    "nsfw_neko_gif",
    "eroyuri",
    "kiss",
    "_8ball",
    "kuni",
    "tits",
    "pussy_jpg",
    "cum_jpg",
    "pussy",
    "lewdkemo",
    "lizard",
    "slap",
    "lewd",
    "cum",
    "cuddle",
    "spank",
    "smallboobs",
    "goose",
    "Random_hentai_gif",
    "avatar",
    "fox_girl",
    "nsfw_avatar",
    "hug",
    "gecg",
    "boobs",
    "pat",
    "feet",
    "smug",
    "kemonomimi",
    "solog",
    "holo",
    "wallpaper",
    "bj",
    "woof",
    "yuri",
    "trap",
    "anal",
    "baka",
    "blowjob",
    "holoero",
    "feed",
    "neko",
    "gasm",
    "hentai",
    "futanari",
    "ero",
    "solo",
    "waifu",
    "pwankg",
    "eron",
    "erokemo",
]


def chunks(lst, n):
    return [lst[i : i + n] for i in range(0, len(lst), n)]


def register(cb):
    cb(KramikkMod())


@loader.tds
class KramikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!"""

    answers = {
        0: ("–ù–µ–≤–Ω—è—Ç–µ–Ω –≤–æ–ø—Ä–æ—Å, —Ö–∑, —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å",),
        1: ("–û—Ç–≤–µ—Ç —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–µ–Ω", "–¢—ã –∑–Ω–∞–µ—à—å –ª—É—á—à–µ –º–µ–Ω—è!", "–û—Ç–≤–µ—Ç —É–±–∏–ª!.."),
        2: ("–î–∞", "–£—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–ê–≥–∞"),
        3: (
            "–î–∞, –Ω–æ –µ—Å—Ç—å –ø–æ–º–µ—Ö–∏", "–ú–æ–∂–µ—Ç –±—ã—Ç—å", "–í–µ—Ä–æ—è—Ç–Ω–æ", "–í–æ–∑–º–æ–∂–Ω–æ", "–ù–∞–≤–µ—Ä–Ω—è–∫–∞"
        ),
        4: (
            "–ó–Ω–∞—é –æ—Ç–≤–µ—Ç, –Ω–æ –Ω–µ —Å–∫–∞–∂—É",
            "–î—É–º–∞–π!",
            "–£–≥–∞–¥–∞–π-–∫–∞...",
            "–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ...",
        ),
        5: ("–ù–µ—Ç", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
        6: (
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–ö–æ–Ω–µ—á–Ω–æ", "–°—Ç–æ –ø—É–¥–æ–≤", "–ê–±—Å–æ–ª—é—Ç–Ω–æ", "–†–∞–∑—É–º–µ–µ—Ç—Å—è", "100%"
        ),
        7: ("–ï—Å—Ç—å –ø–æ–º–µ—Ö–∏...", "–í—Ä—è–¥ –ª–∏", "–ß—Ç–æ-—Ç–æ –ø–æ–º–µ—à–∞–µ—Ç", "–ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ"),
        8: ("–î–∞, –Ω–æ –Ω–µ—Å–∫–æ—Ä–æ", "–î–∞, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å!"),
        9: ("–ù–µ—Ç, –Ω–æ –ø–æ–∫–∞", "–°–∫–æ—Ä–æ!", "–ñ–¥–∏!", "–ü–æ–∫–∞ –Ω–µ—Ç"),
    }
    strings = {
        "name": "Kramikk",
        "update": "<b>–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤</b>",
        "name_not_found": "<u>–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è:</u>\n <code>.kblname %name%</code>",
        "name_set": "<u>–ò–º—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</u>",
        "quest_not_found": "<u>–ê–≥–¥–µ –≤–æ–ø—Ä–æ—Å?</u>",
        "quest_answer": "\n\n<u>%answer%</u>",
        "mention": "<a href='tg://user?id=%id%'>%name%</a>",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        ans = (
            await utils.run_sync(
                requests.get, "https://nekos.life/api/v2/endpoints"
            )
        ).json()
        clans = {
            "–ë–∞–≥oboty": -1001380664241,
            "–¢–æ–º –†—ç–¥–¥–ª": -1001441941681,
            "–ú–∞–Ω—É–ª—ã –∏ –ó–∞–π—á–∞—Ç–∫–∏": -1001289617428,
            "–ñ–∞–±–æ—Ç–æ—Ä—Ç": -1001436786642,
            "–°–≤–æ—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞": -1001485617300,
            "–ë–∞—Ä": -1001465870466,
            ".": -1001409792751,
            "–∂–∞–±–∫–∏ –Ω—ç–ª—Å(–ø–ª–∞—Ç–æ–Ω)": -1001165420047,
            "–°—Ç–∞–Ω—Ü–∏—è": -1001447960786,
            "–î–∏—Ä–∏–∂–∞–±–ª—å": -1001264330106,
            "–°–∫–∞–∑–æ—á–Ω—ã–π –¥–æ–Ω–∞—Ç–µ—Ä": -1001648008859,
            "–õ–∏—Å—Ç–∏–∫": -1001685708710,
            "–ñ–∞–±—ã –∞—Ñ–µ—Ä–∏—Å—Ç—ã –ö—Ä–∞–º –∏ –±–∞–±—É—à–∫–∞": -421815520,
            "–•—ç–ª–ª–æ –í–∏–Ω!": -1001426018704,
            "–¢–∞–Ω—Ü—ã –ø–æ —Å—Ä–µ–¥–∞–º": -1001481051409,
            "IELTS": -1001492669520,
            "–î–æ–º–∏–∫ –≤ –±–æ–ª–æ—Ç–µ": -1001520533176,
            "–ö–æ—Å–º–æ—Å –Ω–∞—Å –∂–¥–µ—Ç": -1001460270560,
            "Forbidden Frog": -1001511984124,
            "Vitoad": -1001771130958,
            "–ö—É—Ä—Å—ã –≤—ã—à–∏–≤–∞–Ω–∏—è": -1001760342148,
            "–ó–æ–ª–æ—Ç–∞—è –∂–∞–±–∞": -1001787904496,
            "LSDtoads": -1001493923839,
            "–¶—ã–≥–∞–Ω–∫–∞": -1001714871513,
            "–∂–∞–±—ã –ª–µ–Ω–∞": -1001419547228,
            "–ñ–∞–±–æ—á–∫–∞": -1001666737591,
            "AstroFrog": -1001575042525,
            "–ö–æ–Ω—Å–∏–ª–∏—É–º –∂–∞–±": -1001777552705,
            "–ñ–∞–±—å–∏ –º–æ–Ω—Å—Ç—Ä–∏–∫–∏": -1001427000422,
            "–ñ–∞–±—ã –í–µ—Ä–æ–Ω—ã": -1001256439407,
            "–ñ–∞–±—å–∏ —Å–ø–µ—Ü–∏–∏": -1001499700136,
            "–ë–æ–ª–æ—Ç–æ–∑–∞–≤—Ä": -1001624280659,
            "–ñ–∞–±–æ–±–æ—Ç—Å—Ç–≤–æ": -543554726,
        }
        self.categories = json.loads(
            "["
            + [_ for _ in ans if "/api" in _ and "/img/" in _][0]
            .split("<")[1]
            .split(">")[0]
            .replace("'", '"')
            + "]"
        )
        self.clans = clans
        self.client = client
        self.endpoints = {
            "img": "https://nekos.life/api/v2/img/",
            "owoify": "https://nekos.life/api/v2/owoify?text=",
            "why": "https://nekos.life/api/v2/why",
            "cat": "https://nekos.life/api/v2/cat",
            "fact": "https://nekos.life/api/v2/fact",
        }
        self.db = db
        self.me = await client.get_me()
        self.status = db.get("Status", "status", {})

    @loader.sudo
    async def delmecmd(self, message):
        chat = message.chat
        if chat:
            args = utils.get_args_raw(message)
            mag = await utils.answer(message, "<b>–ò—â—É —Å–æ–æ–±—â–µ–Ω–∏—è...</b>")
            all = (await self.client.get_messages(chat, from_user="me")).total
            await utils.answer(msg, f"<b>{all} —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ!</b>")
            messages = [
                msg async for msg in self.client.iter_messages(
                    chat, from_user="me"
                )
            ]
            _ = ""
            async for msg in self.client.iter_messages(chat, from_user="me"):
                if _:
                    await msg.delete()
                else:
                    _ = "_"
            await message.delete()

    async def idcmd(self, message):
        reply = await message.get_reply_message()
        user = await self.client.get_entity(reply.sender_id)
        adjectives_start = [
            "—Ö–æ—Ä–æ—à–∏–π(-–∞—è)",
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π(-–∞—è)",
            "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π(-–∞—è)",
            "–¥–ª—è –º–µ–Ω—è –Ω—è—à–Ω—ã–π(-–∞—è)",
            "–ø—ã—à–Ω—ã–π(-–∞—è)",
            "–∞–Ω–≥–µ–ª—å—Å–∫–∏–π(-–∞—è)",
            "–∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–π(-–∞—è)",
        ]
        emojies = ["üê∂", "üê±", "üêπ", "üê£", "ü•™", "üçì", "‚ô•Ô∏è", "ü§ç", "ü™Ñ", "‚ú®", "ü¶πüèª", "üåä"]
        nouns = ["—á–µ–ª–æ–≤–µ–∫", "—É—á–∞—Å—Ç–Ω–∏–∫(-—Ü–∞) –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"]
        starts = [
            "–ù–µ —Ö–æ—á—É –¥–µ–ª–∞—Ç—å –ø–æ—Å–ø–µ—à–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤, –Ω–æ",
            "–Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –º–æ–≥—É —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, –∏ —ç—Ç–æ –º–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ, –Ω–æ",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Å–∏—Ç—É–∞—Ü–∏—é, —è –º–æ–≥—É –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ. –û–Ω–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ",
            "–ù–µ –ø—ã—Ç–∞—è—Å—å –Ω–∏–∫–æ–≥–æ –æ—Å–∫–æ—Ä–±–∏—Ç—å, –∞ –ª–∏—à—å –≤—ã—Å–∫–∞–∑—ã–≤–∞—è —Å–≤–æ—é —Å–∫—Ä–æ–º–Ω—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ",
        ]
        ends = ["!!!!", "!", "."]
        start = random.choice(starts)
        adjective_start = random.choice(adjectives_start)
        adjective_mid = random.choice(adjectives_start)
        noun = random.choice(nouns)
        end = random.choice(ends)
        emojie = random.choice(emojies)
        insult = (
            emojie
            + "  "
            + start
            + " —Ç—ã ‚Äî "
            + adjective_start
            + " –∏ "
            + adjective_mid
            + (" " if adjective_mid else "")
            + noun
            + end
        )
        logger.debug(insult)
        await message.edit(
            f"{insult}\n\n"
            f"–∏–º—è: <b>{user.first_name}</b>\n"
            f"–∞–π–¥–∏: <b>{user.id}</b>\n"
            f"—é–∑–µ—Ä: @{user.username}\n"
            f"–∞–π–¥–∏ —á–∞—Ç–∞: <code>{reply.chat_id}</code>"
        )

    @loader.unrestricted
    async def factcmd(self, message):
        """Did you know?"""
        await utils.answer(
            message,
            f"<b>üßê Did you know, that </b><code>{(await utils.run_sync(requests.get, self.endpoints['fact'])).json()['fact']}</code>",
        )

    async def kblcmd(self, message):
        """–í—ã—Å—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        name = self.db.get("kbl", "name", None)
        if not name:
            return await message.edit(
                self.strings["name_not_found"].replace(
                    "%name%", escape(message.sender.first_name)
                )
            )
        args = utils.get_args_raw(message)
        if not args:
            return await message.edit(self.strings["quest_not_found"])
        words = re.findall(r"\w+", f"{name} {args}")
        words_len = [words.__len__()] + [x.__len__() for x in words]
        i = words_len.__len__()
        while i > 1:
            i -= 1
            for x in range(i):
                words_len[x] = (
                    words_len[x] + words_len[x + 1] - 9
                    if words_len[x] + words_len[x + 1] > 9
                    else words_len[x] + words_len[x + 1]
                )
        return await message.edit(
            self.strings["mention"]
            .replace("%id%", str(self.me.id))
            .replace("%name%", name)
            + ":\n"
            + args
            + f'?\n\n{" |"*words_len[0]}'
            + self.strings["quest_answer"].replace(
                "%answer%", choice(self.answers[words_len[0]])
            )
        )

    async def kblnamecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∏–∏–∏-–º—è –ª—é-–±–∏-–º–æ–µ —Ç–≤–æ—ë"""
        args = utils.get_args(message)
        await self.db.set("kbl", "name", " ".join(args) if args else None)
        await message.edit(self.strings["name_set"])

    @loader.unrestricted
    async def meowcmd(self, message):
        """Sends cat ascii art"""
        await utils.answer(
            message,
            f"<b>{(await utils.run_sync(requests.get, self.endpoints['cat'])).json()['cat']}</b>",
        )

    @loader.pm
    async def nekocmd(self, message):
        """Send anime pic"""
        args = utils.get_args_raw(message)
        args = "neko" if args not in self.categories else args
        pic = (
            await utils.run_sync(requests.get, f"{self.endpoints['img']}{args}")
        ).json()["url"]
        await self.client.send_file(
            message.peer_id, pic, reply_to=message.reply_to_msg_id
        )
        await message.delete()

    @loader.pm
    async def nekoctcmd(self, message):
        """Show available categories"""
        cats = "\n".join(
            [" | </code><code>".join(_) for _ in chunks(self.categories, 5)]
        )
        await utils.answer(
            message, f"<b>Available categories:</b>\n<code>{cats}</code>"
        )

    @loader.owner
    async def nkcmd(self, m):
        args = utils.get_args_raw(m)
        typ = None
        if args:
            if args in types_of:
                typ = args
        else:
            typ = "neko"
        if typ is None:
            return await m.edit("<b>–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ</b>")
        await m.edit("<b>Mmm...</b>")
        reply = await m.get_reply_message()
        await m.client.send_file(
            m.to_id,
            requests.get(f"https://nekos.life/api/v2/img/{typ}").json()["url"],
            reply_to=reply.id if reply else None,
        )
        await m.delete()

    async def nkctcmd(self, m):
        await m.edit(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(
                f"<code>{i}</code>" for i in types_of
            )
        )

    @loader.unrestricted
    async def owoifycmd(self, message):
        """OwOify text"""
        args = utils.get_args_raw(message)
        if not args:
            args = await message.get_reply_message()
            if not args:
                await message.delete()
                return

            args = args.text

        if len(args) > 180:
            message = await utils.answer(message, "<b>OwOifying...</b>")
            try:
                message = message[0]
            except:
                pass

        args = quote_plus(args)
        owo = ""
        for chunk in chunks(args, 180):
            owo += (
                await utils.run_sync(
                    requests.get, f"{self.endpoints['owoify']}{chunk}")
            ).json()["owo"]
            await sleep(0.1)
        await utils.answer(message, owo)

    async def watcher(self, message):
        asly = random.choice(asl)
        bak = {
            1222132115,
            1646740346,
            1261343954,
            1785723159,
            1486632011,
            1682801197,
            1863720231,
            1775420029,
            1286303075,
            1746686703,
            1459363960,
            1423368454,
            547639600,
            388412512,
        }
        chat = message.chat_id
        chatid = str(message.chat_id)
        chatik = -1001441941681
        duel = self.db.get("–î—É—ç–ª—å–∫–∞", "duel", {})
        jb = "–í–∞—à–∞ –ñ–∞–±–∞"
        lvl = False
        name = self.me.first_name
        if self.me.id in {1261343954}:
            name = "–ú–æ–Ω–∞—Ä—Ö"
        if self.me.id in {1486632011}:
            name = "–û–±–æ—Ç–∏"
        if self.me.id in {1286303075}:
            name = "–õ–∞–≤–∏–Ω"
        if self.me.id in {1785723159}:
            name = "–ö—Ä–∞–º–∏–∫"
        if self.me.id in {547639600}:
            name = "–ù–µ–ª—å—Å"

        rn = [5, 9, 13, 17, 21, 33, 43]
        aa = random.choice(rn)
        a1 = int((aa - 1) / 2)
        b1 = (self.me.id % 100) + a1
        c1 = random.randint(a1, b1+aa)
        bb = c1 - a1
        randelta = random.randint(a1, c1+bb)

        if message.sender_id in {self.me.id}:
            if "buji" in message.message:
                try:
                    await message.delete()
                    args = message.text
                    reply = await message.get_reply_message()
                    count = int(args.split(" ", 3)[1])
                    time = int(args.split(" ", 3)[2])
                    if reply:
                        spammsg = args.split(" ", 3)[3]
                        if "–±—É–∫" in spammsg:
                            while count > 50049:
                                await reply.reply("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ 50000")
                                count -= 50000
                                await sleep(time)
                            snt = count - 50
                            await reply.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ {snt}")
                        else:
                            for _ in range(count):
                                await reply.reply(spammsg)
                                await sleep(time)
                    else:
                        spammsg = args.split(" ", 3)[3]
                        for _ in range(count):
                            await message.respond(spammsg)
                            await sleep(time)
                except:
                    await self.client.send_message(
                        chat, "buji <count:int> <time(sec):int> <args>"
                    )
            if "–æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å" in message.message:
                cid = "clan"
                if cid not in self.status:
                    await utils.answer(message, self.strings("update", message))
                else:
                    await message.edit(self.status[cid])
                prit = "<b>–ú–æ–π –æ–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>"
                for clan_name, clan_id in self.clans.items():
                    async with self.client.conversation(clan_id) as conv:
                        response = conv.wait_event(
                            events.NewMessage(
                                incoming=True, from_users=1124824021, chats=clan_id
                            )
                        )
                        await conv.send_message("–º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
                        response = await response
                        if "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:" in response.text:
                            caption = re.search(
                                "üç¨–õ–µ–¥–µ–Ω—Ü—ã: (\d+)", response.text
                            ).group(1)
                            caption1 = re.search(
                                "üíä–ê–ø—Ç–µ—á–∫–∏: (\d+)", response.text
                            ).group(1)
                            caption2 = re.search(
                                "üó∫–ö–∞—Ä—Ç–∞ –±–æ–ª–æ—Ç–∞: (\d+)", response.text
                            ).group(1)
                            caption3 = re.search(
                                "üê∏–ñ–∞–±—É–ª–∏ –¥–ª—è –±–∞–Ω–¥—ã: (.+)", response.text
                            ).group(1)
                            prit += f"\n\n{clan_name}\nüç¨–õ–µ–¥–µ–Ω—Ü—ã: {caption}\nüíä–ê–ø—Ç–µ—á–∫–∏: {caption1}\nüó∫–ö–∞—Ä—Ç–∞ –±–æ–ª–æ—Ç–∞: {caption2}\nüê∏–ñ–∞–±—É–ª–∏ –¥–ª—è –±–∞–Ω–¥—ã: {caption3}"
                args = prit
                self.status[cid] = args
                self.db.set("Status", "status", self.status)
                await message.edit(f"{args}")

        if message.sender_id in bak:
            if "–∂–∞–±–∞ –∏–Ω—Ñ–æ" in message.message.casefold():
                await sleep(randelta)
            if asly in message.message:
                sch = (
                    await self.client(
                        functions.messages.GetScheduledHistoryRequest(chat, 0)
                    )
                ).messages
                await self.client(
                    functions.messages.DeleteScheduledMessagesRequest(
                        chat, id=[x.id for x in sch]
                    )
                )
                await sleep(randelta)
                async with self.client.conversation(message.chat_id) as conv:
                    response = conv.wait_event(
                        events.NewMessage(
                            incoming=True,
                            from_users=1124824021,
                            chats=message.chat_id,
                        )
                    )
                    await message.respond("–∂–∞–±–∞ –∏–Ω—Ñ–æ")
                    response = await response
                    if "—Ä–∞–±–æ—Ç—É –º–æ–∂–Ω–æ" in response.text:
                        time_j = re.search(
                            "–±—É–¥–µ—Ç —á–µ—Ä–µ–∑ (\d+)—á:(\d+)–º",
                            response.text,
                            re.IGNORECASE,
                        )
                        if time_j:
                            hrs = int(time_j.group(1))
                            min = int(time_j.group(2))
                            delta = timedelta(
                                hours=hrs, minutes=min, seconds=randelta
                            )
                        await self.client.send_message(
                            chat, "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É", schedule=delta
                        )
                        await self.client.send_message(
                            chat,
                            "—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å",
                            schedule=delta + timedelta(seconds=13),
                        )
                        for number in range(2):
                            delta = delta + timedelta(hours=8)
                            await self.client.send_message(
                                chat, "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É", schedule=delta
                            )
                            await self.client.send_message(
                                chat,
                                "—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å",
                                schedule=delta + timedelta(seconds=randelta),
                            )
                            await self.client.send_message(
                                chat,
                                "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
                                schedule=delta
                                + timedelta(hours=2, seconds=randelta + 3),
                            )
                    else:
                        if "–∂–∞–±—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑" in response.text:
                            time_r = re.search(
                                "—á–µ—Ä–µ–∑ (\d+) —á–∞—Å–æ–≤ (\d+) –º–∏–Ω—É—Ç",
                                response.text,
                                re.IGNORECASE,
                            )
                            if time_r:
                                hrs = int(time_r.group(1))
                                min = int(time_r.group(2))
                                delta = timedelta(
                                    hours=hrs, minutes=min, seconds=randelta
                                )
                            await self.client.send_message(
                                chat, "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", schedule=delta
                            )
                        elif "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" in response.text:
                            await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                            await message.respond("—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å")
                            delta = timedelta(hours=2, seconds=randelta)
                            await self.client.send_message(
                                chat, "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", schedule=delta
                            )
                        else:
                            await message.respond("–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
                        for number in range(2):
                            delta = delta + timedelta(hours=6, seconds=3)
                            await self.client.send_message(
                                chat, "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É", schedule=delta
                            )
                            await self.client.send_message(
                                chat,
                                "—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å",
                                schedule=delta + timedelta(seconds=randelta),
                            )
                            await self.client.send_message(
                                chat,
                                "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
                                schedule=delta
                                + timedelta(hours=2, seconds=randelta + 3),
                            )
                    if "–ø–æ–∫–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑" in response.text:
                        time_n = re.search(
                            "–ø–æ–∫–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ (\d+)—á:(\d+)–º",
                            response.text,
                            re.IGNORECASE,
                        )
                        if time_n:
                            hrs = int(time_n.group(1))
                            min = int(time_n.group(2))
                            delta = timedelta(
                                hours=hrs, minutes=min, seconds=randelta
                            )
                        await self.client.send_message(
                            chat, "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É", schedule=delta
                        )
                    else:
                        delta = timedelta(seconds=randelta)
                        await self.client.send_message(
                            chat, "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É", schedule=delta
                        )
                    for number in range(2):
                        delta = delta + timedelta(hours=12, seconds=3)
                        await self.client.send_message(
                            chat, "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É", schedule=delta
                        )

            if name + " –¥—É—ç–ª—å–∫–∞" in message.message:
                if chatid in duel:
                    duel.pop(chatid)
                    self.db.set("–î—É—ç–ª—å–∫–∞", "duel", duel)
                    return await message.respond("<b>–ø—å—é —Ä–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π</b>!")
                duel.setdefault(chatid, {})
                self.db.set("–î—É—ç–ª—å–∫–∞", "duel", duel)
                async with self.client.conversation(message.chat_id) as conv:
                    response = conv.wait_event(
                        events.NewMessage(
                            incoming=True, from_users=1124824021, chats=message.chat_id
                        )
                    )
                    await conv.send_message("–º–æ—è –∂–∞–±–∞")
                    response = await response
                    if "–ò–º—è –∂–∞–±—ã:" in response.text:
                        jaba = re.search("–ò–º—è –∂–∞–±—ã: (.+)", response.text).group(1)
                self.status[jb] = jaba
                self.db.set("Status", "status", self.status)
                await message.respond(f"–ò–º—è –∂–∞–±—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {jaba}")
                await message.respond("–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç–¨ –∂–∞–±—É")
            if name + " –Ω–∞–ø–∞–¥–∏" in message.message:
                async with self.client.conversation(chat) as conv:
                    try:
                        response = conv.wait_event(
                            events.NewMessage(
                                incoming=True,
                                from_users=1124824021,
                                chats=message.chat_id,
                            )
                        )
                        await message.respond("<b>–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω</b>")
                        response = await response
                        if "–í–∞—à–∞ –∂–∞–±–∞ –Ω–∞" in response.text:
                            await message.respond("–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
                            await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                            await message.respond("–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω")
                        elif "–í–∞—à–∞ –∂–∞–±–∞ —Å–µ–π—á–∞—Å" in response.text:
                            await message.respond("–≤—ã–π—Ç–∏ –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è")
                            await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                            await message.respond("–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω")
                        else:
                            await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                            await message.respond("–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω")
                    except TimeoutError:
                        await message.reply("–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞...")
            if name + " –ø–æ–¥–∑–µ–º–µ–ª—å–µ" in message.message:
                async with self.client.conversation(chat) as conv:
                    try:
                        response = conv.wait_event(
                            events.NewMessage(
                                incoming=True,
                                from_users=1124824021,
                                chats=message.chat_id,
                            )
                        )
                        await message.respond("<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ</b>")
                        response = await response
                        if "–ü–æ–∂–∞–ª–µ–π—Ç–µ –∂–∞–±—É," in response.text:
                            await message.respond("–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
                            await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                            await message.respond("<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ</b>")
                        elif "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è" in response.text:
                            await message.respond("–¥—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å")
                            await message.respond("–¥—É—ç–ª—å –æ—Ç–æ–∑–≤–∞—Ç—å")
                            await message.respond("<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ</b>")
                        else:
                            await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                            await message.respond("<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ</b>")
                    except TimeoutError:
                        await message.reply("–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞...")
            if name + " —Å —Ä–∞–±–æ—Ç—ã" in message.message:
                await message.respond("<b>–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É</b>")
            if name + " –∫–∞—Ä—Ç—É" in message.message:
                await message.respond("<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É</b>")
            if name + " –∑–∞ –∫–∞—Ä—Ç–æ–π" in message.message:
                await message.respond("<b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∑–∞ –∫–∞—Ä—Ç–æ–π</b>")
            if name + " –Ω–∞ —Ç—É—Å—É" in message.message:
                await message.respond("<b>—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É</b>")
                await message.respond("<b>–∂–∞–±—É –Ω–∞ —Ç—É—Å—É</b>")
            if message.sender_id not in {self.me.id}:
                if "–±—É–∫–∞—à–∫–∏ –º–Ω–µüòä" in message.message:
                    await sleep(randelta)
                    async with self.client.conversation(chat) as conv:
                        response = conv.wait_event(
                            events.NewMessage(
                                incoming=True,
                                from_users=1124824021,
                                chats=message.chat_id,
                            )
                        )
                        await message.respond("–º–æ–π –±–∞–ª–∞–Ω—Å")
                        response = await response
                        if "–ë–∞–ª–∞–Ω—Å –±—É–∫–∞—à–µ–∫ –≤–∞—à–µ–π" in response.text:
                            bug = int(
                                re.search(
                                    "–∂–∞–±—ã: (\d+)", response.text, re.IGNORECASE
                                ).group(1)
                            )
                            if bug < 100:
                                await message.reply("–æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –ø–æ—Ö–æ–¥–∞")
                            else:
                                while bug > 50049:
                                    await message.reply("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ 50000")
                                    bug -= 50000
                                snt = bug - 50
                                await message.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ {snt}")
                if "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –º–Ω–µüòä" in message.message:
                    await sleep(randelta)
                    async with self.client.conversation(chat) as conv:
                        response = conv.wait_event(
                            events.NewMessage(
                                incoming=True,
                                from_users=1124824021,
                                chats=message.chat_id,
                            )
                        )
                        await message.respond("–º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
                        response = await response
                        if "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:" in response.text:
                            cnd = int(
                                re.search(
                                    "–õ–µ–¥–µ–Ω—Ü—ã: (\d+)", response.text, re.IGNORECASE
                                ).group(1)
                            )
                            apt = int(
                                re.search(
                                    "–ê–ø—Ç–µ—á–∫–∏: (\d+)", response.text, re.IGNORECASE
                                ).group(1)
                            )
                        if cnd > 0:
                            if cnd > 49:
                                await message.reply("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–µ–¥–µ–Ω—Ü—ã 50")
                            else:
                                await message.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–µ–¥–µ–Ω—Ü—ã {cnd}")
                        if apt > 0:
                            if apt > 9:
                                await message.reply("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ø—Ç–µ—á–∫–∏ 10")
                            else:
                                await message.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ø—Ç–µ—á–∫–∏ {apt}")

        if message.sender_id in {1124824021}:
            if "–°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç —Ö–æ–¥: " + self.me.first_name in message.message:
                await message.click(0)
            if "–ì–æ—Å–ø–æ–¥–∏–Ω " + self.me.first_name in message.message:
                await message.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                await message.respond("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∑–∞ –∫–∞—Ä—Ç–æ–π")

        if chatid not in duel:
            return

        if message.sender_id not in {self.me.id, 1124824021}:
            if "–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç–¨ –∂–∞–±—É" in message.message:
                await sleep(randelta)
                await message.reply("–¥—É—ç–ª—å")

        if message.sender_id in {1124824021}:
            if (
                "–í—ã –±—Ä–æ—Å–∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + self.me.first_name
                in message.message
            ):
                await sleep(randelta)
                await message.respond("–¥—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç—å")
                await sleep(randelta)
                await message.respond("–¥—É—ç–ª—å —Å—Ç–∞—Ä—Ç")

            if jb in self.status:
                if self.status[jb] + ", –£ –≤–∞—Å –Ω–∏—á—å—è" in message.message:
                    await sleep(randelta)
                    await message.respond("–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç–¨ –∂–∞–±—É")

                if "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å" in message.message:
                    if self.status[jb] + "!!!" in message.message:
                        if "–æ—Ç—ã–≥—Ä–∞–ª" in message.message:
                            duel.pop(chatid)
                            self.db.set("–î—É—ç–ª—å–∫–∞", "duel", duel)
                            return await message.respond("<b>–ø—å—é —Ä–æ–º–∞—à–∫–æ–≤—ã–π —á–∞–π</b>!")
                        else:
                            return
                    else:
                        await sleep(randelta)
                        await message.respond("–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç–¨ –∂–∞–±—É")

    @loader.unrestricted
    async def whycmd(self, message):
        """Why?"""
        await utils.answer(
            message,
            f"<code>üëæ {(await utils.run_sync(requests.get, self.endpoints['why'])).json()['why']}</code>",
        )

# import logging
# from .. import loader
# from telethon import events
# import asyncio
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
# from apscheduler.triggers.cron import CronTrigger
# import re
# from datetime import timedelta

# # requires: apscheduler

# logger = logging.getLogger(__name__)

# @loader.tds
# class SchedulerMod(loader.Module):
#     """–®–µ–¥—É–ª–µ—Ä"""
#     strings = {'name': 'Scheduler'}

#     async def client_ready(self, client, db):
#         self.client = client
#         self.db = db

#         TOAD_STATION = -1001447960786
#         TOM_REDDL = -1001441941681
#         FROPPY = -1001403626354

#         FARMS = {"–ñ–∞–±–æ–±–æ—Ç—Å–≤–æ" : -543554726,
#                 "–ñ–∞–±—ã –í–µ—Ä–æ–Ω—ã" : -1001256439407,
#                 "." : -1001409792751,
#                 "–∂–∞–±—ã –ª–µ–Ω–∞" : -1001419547228,
#                 "–•—ç–ª–ª–æ –í–∏–Ω!" : -1001426018704,
#                 "–ñ–∞–±—å–∏ —Å–ø–µ—Ü–∏–∏" : -1001499700136,
#                 "LSDtoads" : -1001493923839,
#                 "–ñ–∞–±–æ—Ç–æ—Ä—Ç" : -1001436786642,
#                 "–¢–∞–Ω—Ü—ã –ø–æ —Å—Ä–µ–¥–∞–º" : -1001481051409,
#                 "IELTS" : -1001492669520,
#                 "–î–æ–º–∏–∫ –≤ –±–æ–ª–æ—Ç–µ " : -1001520533176,
#                 "–ö–æ—Å–º–æ—Å –Ω–∞—Å –∂–¥–µ—Ç" : -1001460270560,
#                 "–ñ–∞–±—å–∏ –º–æ–Ω—Å—Ç—Ä–∏–∫–∏" : -1001427000422,
#                 "Forbidden Frog" : -1001511984124,
#                 "AstroFrog" : -1001575042525,
#                 "–°–∂–∞–±–∫–∏ –Ω–µ–ª—Å(–ø–ª–∞—Ç–æ–Ω)" : -1001165420047,
#                 "–ñ–∞–±–æ—á–∫–∞" : -1001666737591,
#                 "–°–∫–∞–∑–æ—á–Ω—ã–π –¥–æ–Ω–∞—Ç–µ—Ä" : -1001648008859,
#                 "–õ–∏—Å—Ç–∏–∫" : -1001685708710,
#                 "–ñ–∞–±—ã –∞—Ñ–µ—Ä–∏—Å—Ç—ã –ö—Ä–∞–º –∏ –±–∞–±—É—à–∫–∞" : -421815520,
#                 "–°–Ω—ã –ª—è–≥—É—à–µ–∫" : -1001767427396,
#                 "–ö—É—Ä—Å—ã –≤—ã—à–∏–≤–∞–Ω–∏—è" : -1001760342148,
#                 "–¶—ã–≥–∞–Ω–∫–∞" : -1001714871513,
#                 "Vitoad" : -1001771130958,
#                 "–ö–æ–Ω—Å–∏–ª–∏—É–º –∂–∞–±" : -1001777552705,
#                 "–î–∏—Ä–∏–∂–∞–±–ª—å" : -1001264330106,
#                 "–ó–æ–ª–æ—Ç–∞—è –∂–∞–±–∞" : -1001787904496,
#                 "–ë–æ–ª–æ—Ç–æ–∑–∞–≤—Ä" : -1001624280659,
#                 "–ë–∞–≥oboty" : -1001380664241,
#                 "–û—Å–∫–æ–ª–æ–∫" : -1001289617428,
#                 "–ñ–∞–±—å–µ –¶–∞—Ä—Å—Ç–≤–æ" : -714494521,
#                 "–î–µ—Ä–µ–≤–Ω—è –∂–∞–±" : -668421956}

#         async def feed_toad(chat):
#             await client.send_message(chat, '–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É')
#             async with client.conversation(chat) as conv:
#                 response = conv.wait_event(events.NewMessage(incoming=True, from_users=1124824021, chats=chat))
#                 await asyncio.sleep(3)
#                 await client.send_message(chat, '–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É')
#                 response = await response
#                 next_food_hours = 4
#                 next_food_minutes = 3
#                 if "–û—Ç–∫–∞—Ä–º–ª–∏–≤–∞—Ç—å –∂–∞–±—É" in response.raw_text:

#                    pattern = re.compile('—á–µ—Ä–µ–∑ (.) —á:(.?.) –º–∏–Ω', re.IGNORECASE) #–ø–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–µ–º–µ–Ω–∏
#                    matcher = pattern.search(response.raw_text)

#                    next_food_hours = int(matcher.group(1)) #–ø–æ–ª—É—á–∞–µ–º —á–∞—Å—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#                    next_food_minutes = int(matcher.group(2)) #–ø–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

#                 delta = timedelta(hours=next_food_hours, minutes=next_food_minutes)
#                 await client.send_message(chat, '–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É', schedule=delta)

#                 for number in range(5):
#                    delta += timedelta(hours=4, minutes=3)
#                    await client.send_message(chat, '–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É', schedule=delta)
#                    await asyncio.sleep(1)

#                 delta = timedelta(hours=1)
#                 await client.send_message(chat, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', schedule=delta)

#                 for number in range(15):
#                    delta += timedelta(hours=1, minutes=30)
#                    await client.send_message(chat, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', schedule=delta)
#                    await asyncio.sleep(1)


#         async def send_kid_to_kindergarten():
#             await client.send_message(TOM_REDDL, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –≤ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥')
#             await client.send_message(TOAD_STATION, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –≤ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥')
#             await client.send_message(FROPPY, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –≤ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥')

#         async def send_kid_to_fighting():
#             await client.send_message(TOM_REDDL, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á')
#             await client.send_message(TOAD_STATION, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á')
#             await client.send_message(FROPPY, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á')

#         async def feed_kid():
#             await client.send_message(TOM_REDDL, '–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞')
#             await client.send_message(TOAD_STATION, '–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞')
#             await client.send_message(TOAD_STATION, '/dick@kraft28_bot')
#             await client.send_message(FROPPY, '–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞')
#             await client.send_message(FROPPY, '/dick@kraft28_bot')

#         async def kid_from_kindergarten():
#             await client.send_message(TOAD_STATION, '–∑–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞')
# #             await client.send_message(TOM_REDDL, '–∑–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞')
#             await client.send_message(FROPPY, '–∑–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞')

#         async def feed_toads():
#             await feed_toad(TOM_REDDL)
#             await feed_toad(TOAD_STATION)
#             await feed_toad(FROPPY)

#         async def best_toad_on_farms():
#             for farm_name, farm_id in FARMS.items():
#                 await asyncio.sleep(5)
#                 await client.send_message(farm_id, '–∂–∞–±–∞ –¥–Ω—è')

#         async def collect_money():
#             for farm_name, farm_id in FARMS.items():
#                 await asyncio.sleep(5)
#                 await client.send_message(farm_id, '!–¥–∞–π—Ç–µ –±—É–∫–∞—Ö')

#         async def arena():
#             await client.send_message(TOM_REDDL, '–Ω–∞ –∞—Ä–µ–Ω—É')
#             await client.send_message(TOAD_STATION, '–Ω–∞ –∞—Ä–µ–Ω—É')
#             await client.send_message(FROPPY, '–Ω–∞ –∞—Ä–µ–Ω—É')

#         async def recover():
#             await client.send_message(TOM_REDDL, '—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É')
#             await client.send_message(TOAD_STATION, '—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É')
#             await client.send_message(FROPPY, '—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É')

#         scheduler = AsyncIOScheduler()
#         scheduler.add_job(send_kid_to_kindergarten, CronTrigger.from_crontab('03 6 * * *', timezone='Europe/Moscow'))
#         scheduler.add_job(send_kid_to_fighting, CronTrigger.from_crontab('10 8 * * *', timezone='Europe/Moscow'))
#         scheduler.add_job(kid_from_kindergarten, CronTrigger.from_crontab('6 12 * * *', timezone='Europe/Moscow'))
#         scheduler.add_job(best_toad_on_farms, CronTrigger.from_crontab('15 0 * * *', timezone='Europe/Moscow'))
# #        scheduler.add_job(collect_money, CronTrigger.from_crontab('0 9 * * *', timezone='Europe/Moscow'))
# #         scheduler.add_job(arena, CronTrigger.from_crontab('5,10,15,20 8-21 * * *', timezone='Europe/Moscow'))
# #         scheduler.add_job(recover, CronTrigger.from_crontab('3 8-21 * * *', timezone='Europe/Moscow'))

#         scheduler.start()

#         asyncio.get_event_loop().run_forever()

#         elif m.text.startswith("/an") and m.from_user.id == self._me:
#             await self._bot.send_message(
#                 int(m.text.split(" ", 2)[1]), m.text.split(" ", 2)[2]
#             )
#             await m.answer(self.strings("sent"))
#         elif self.inline.gs(m.from_user.id) == "fb_send_message":
#             r = await self._bot.forward_message(self._me, m.chat.id, m.message_id)
#             await r.answer(m.from_user.id)
#             await m.answer(self.strings("sent"))


#     async def emojicmd(self, message):
#         args = utils.get_args_raw(message)
#         c = args.split(" ")
#         emoji = [
#             "üòÄ",
#             "üòÉ",
#             "üòÑ",
#             "üòÅ",
#             "üòÜ",
#             "üòÖ",
#             "ü§£",
#             "ü•∞",
#             "üòá",
#             "üòä",
#             "üòâ",
#             "üôÉ",
#             "üôÇ",
#             "üòÇ",
#             "üòç",
#             "ü§©",
#             "üòò",
#             "üòó",
#             "‚ò∫",
#             "üòö",
#             "üòô",
#             "ü§ó",
#             "ü§ë",
#             "üòù",
#             "ü§™",
#             "üòú",
#             "üòõ",
#             "üòã",
#             "ü§≠",
#             "ü§´",
#             "ü§î",
#             "ü§ê",
#             "ü§®",
#             "üòê",
#             "üòë",
#             "üòå",
#             "ü§•",
#             "üò¨",
#             "üôÑ",
#             "üòí",
#             "üòè",
#             "üò∂",
#             "üòî",
#             "üò™",
#             "ü§§",
#             "üò¥",
#             "üò∑",
#             "ü§í",
#             "ü§ï",
#             "ü§¢",
#             "ü§Ø",
#             "ü§Æ",
#             "ü§†",
#             "ü§ß",
#             "ü•≥",
#             "ü•µ",
#             "üòé",
#             "ü•∂",
#             "ü§ì",
#             "ü•¥",
#             "üßê",
#             "üòµ",
#             "üòï",
#             "üò≥",
#             "üò¢",
#             "üò≤",
#             "üò•",
#             "üòØ",
#             "üò∞",
#             "üòÆ",
#             "üò®",
#             "üòß",
#             "üôÅ",
#             "üò¶",
#             "üòü",
#             "ü•∫",
#             "üò≠",
#             "üò´",
#             "üò±",
#             "ü•±",
#             "üòñ",
#             "üò§",
#             "üò£",
#             "üò°",
#             "üòû",
#             "üò†",
#             "üòì",
#             "ü§¨",
#             "üò©",
#             "üòà",
#             "üëø",
#         ]
#         d = []
#         e = len(c)
#         for i in range(e):
#             rand = random.choice(emoji)
#             d.append(c[i])
#             d.append(rand)
#         f = len(d) - 1
#         d.pop(f)
#         t = "".join(d)
#         await message.edit(t)

#     async def chatcmd(self, message):
#         chat = str(message.chat_id)
#         await message.respond(f"–ê–π–¥–∏ —á–∞—Ç–∞: <code>{chat}</code>")

#     async def delmsgcmd(self, message):
#         msg = [
#             msg
#             async for msg in message.client.iter_messages(
#                 message.chat_id, from_user="me"
#             )
#         ]
#         if utils.get_args_raw(message):
#             args = int(utils.get_args_raw(message))
#         else:
#             args = len(msg)
#         for i in range(args):
#             await msg[i].delete()
#             await sleep(0.16)

#     async def shifrcmd(self, message):
#         text = utils.get_args_raw(message).lower()
#         txtnorm = dict(
#             zip(
#                 map(ord, "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é. ?!,-:;"),
#                 "3√´jmqv9√¥¬ß√ºld–πa¬ø42z—çou…ô√†>√Ω5e√∂$0¬°<61¬•g8t—ä7",
#             )
#         )
#         txt = text.translate(txtnorm)
#         await message.edit(txt)
#         await sleep(300)
#         await message.delete()

#     async def deshifrcmd(self, message):
#         text = str(await message.get_reply_message()).split("'")
#         await message.delete()
#         txt = text[1]

#         txtnorm = dict(
#             zip(
#                 map(ord, "3√´jmqv9√¥¬ß√ºld–πa¬ø42z—çou…ô√†>√Ω5e√∂$0¬°<61¬•g8t—ä7"),
#                 "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é. ?!,-:;7",
#             )
#         )
#         txte = txt.translate(txtnorm)
#         await message.client.send_message("me", txte)

#     @loader.owner
#     async def qgcmd(self, m):
#         jup = ""
#         for a in utils.get_args_raw(m):
#             if a.lower() in alp:
#                 arp = alp[a.lower()]
#                 if a.isupper():
#                     arp = arp.upper()
#             else:
#                 arp = a
#             jup += arp
#         await utils.answer(m, jup)


# alp = {
#     "–∞": "a",
#     "”ô": "√§",
#     "–±": "b",
#     "–≤": "v",
#     "–≥": "g",
#     "“ì": "ƒü",
#     "–¥": "d",
#     "–µ": "e",
#     "–∂": "j",
#     "–∑": "z",
#     "–∏": "i",
#     "–π": "y",
#     "–∫": "k",
#     "“õ": "k",
#     "–ª": "l",
#     "–º": "m",
#     "–Ω": "n",
#     "“£": "≈Ñ",
#     "–æ": "o",
#     "”©": "√∂",
#     "–ø": "p",
#     "—Ä": "r",
#     "—Å": "s",
#     "—Ç": "t",
#     "—É": "w",
#     "“±": "u",
#     "“Ø": "√º",
#     "—Ñ": "f",
#     "—Ö": "h",
#     "“ª": "h",
#     "—ã": "ƒ±",
#     "—ñ": "i",
#     "—á": "ch",
#     "—Ü": "ts",
#     "—à": "c",
#     "—â": "cc",
#     "—ç": "e",
#     "—è": "ya",
# }

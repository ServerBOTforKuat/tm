import asyncio
import random
import re
from datetime import timedelta

from .. import loader


@loader.tds
class KramiikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!"""

    strings = {"name": "Kramiikk"}

    async def abj(self, m):
        chat = m.peer_id
        await m.delete()
        cmn = "–º–æ–∏ –∂–∞–±—ã"
        await self.err(chat, cmn)
        await self.client.delete_dialog(chat)
        if "chats" not in self.su or "auto" not in self.su:
            return
        capt = re.findall(r"(\d+) \| (-\d+)", RSP.text)
        for s in capt:
            try:
                chat = int(s[1])
                if "chats" in self.su and int(s[1]) not in self.su["chats"]:
                    continue
                cmn = "–º–æ—è –∂–∞–±–∞"
                await self.err(chat, cmn)
                for i in (i for i in self.ded if i in RSP.text):
                    await RSP.respond(self.ded[i])
                jab = re.search(r"–ë.+: (\d+)", RSP.text).group(1)
                if not jab:
                    return
                cmn = "–∂–∞–±–∞ –∏–Ω—Ñ–æ"
                await self.err(chat, cmn)
                if "üèÉ‚Äç‚ôÇÔ∏è" not in RSP.text:
                    return
                for i in (i for i in self.ded if i in RSP.text):
                    if (int(s[0]) < 123 or int(jab) < 3333) and i in (
                        "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å",
                        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è",
                    ):
                        continue
                    await RSP.respond(self.ded[i])
            except Exception:
                pass

    async def bbj(self):
        if "auto" in self.su or "chats" in self.su:
            await self.client.send_message(
                1124824021,
                "üíëüë©‚Äç‚ù§Ô∏è‚Äçüë®üë®‚Äç‚ù§Ô∏è‚Äçüë®üíë",
                schedule=timedelta(minutes=random.randint(128, 247)),
            )

    async def cbj(self, m):
        if not m.text.casefold().startswith(self.su["name"]):
            return
        reply = await m.get_reply_message()
        if "–Ω–∞–ø–∏—à–∏ –≤ " in m.text:
            chat = m.text.split(" ", 4)[3]
            if chat.isnumeric():
                chat = int(chat)
            if reply:
                txt = reply
            txt = m.text.split(" ", 4)[4]
            return await self.client.send_message(chat, txt)
        if "–Ω–∞–ø–∏—à–∏" in m.text:
            txt = m.text.split(" ", 2)[2]
            if reply:
                return await reply.reply(txt)
            await m.respond(txt)
        elif "–±—É–∫–∞—Ö" in m.text and self.su["name"] in ["–∫—É—à–∫–∏", "–∞–ª—å–±–µ—Ä—Ç"]:
            await asyncio.sleep(random.randint(0, 360))
            chat = m.peer_id
            cmn = "–º–æ–π –±–∞–ª–∞–Ω—Å"
            await self.err(chat, cmn)
            if "–£ —Ç–µ–±—è" in RSP.text:
                return await m.respond("–≤–∑—è—Ç—å –∂–∞–±—É")
            if "–ë–∞–ª–∞–Ω—Å" not in RSP.text:
                return
            jab = int(re.search(r"–∂–∞–±—ã: (\d+)", RSP.text).group(1))
            if jab >= 50:
                await m.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ {jab}")
        else:
            cmn = m.text.split(" ", 1)[1]
            if cmn in self.ded:
                await m.reply(self.ded[cmn])

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.su = db.get("Su", "su", {})
        self.me = await client.get_me()
        if "name" not in self.su:
            self.su.setdefault("job", "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ")
            self.su.setdefault("name", self.me.first_name)
            self.su.setdefault("users", [self.me.id, 1124824021, 1785723159])
            self.db.set("Su", "su", self.su)
        self.ded = {
            "–ù—É–∂–Ω–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è": "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
            "–•–æ—Ä–æ—à–µ–µ": "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã 4",
            "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã": "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å": "–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É",
            "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å": "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É": "–Ω–∞ –∞—Ä–µ–Ω—É",
            "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å": self.su["job"],
            "–∑–æ–ª–æ—Ç–æ": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–≥–æ –∫–≤": "–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É",
            "–Ω–∞–ø–∞–¥–∏": "–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω",
            "–∫–∞—Ä—Ç—É": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
            "—Ç—É—Å–∞": "–∂–∞–±—É –Ω–∞ —Ç—É—Å—É",
            "–ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏",
            "–î–∞–ª—å–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç",
            "–ù–∞–≥–æ–ª–æ–≤–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–≥—Ä—É–¥–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–ª–∞–ø–Ω–∏–∫–∏: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ë–∞–Ω–¥–∞: –ü—É—Å—Ç–æ": "–≤–∑—è—Ç—å –∂–∞–±—É",
        }

    @staticmethod
    async def dbj(m):
        await m.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
        return await m.click(0)

    async def ebj(self, m):
        fff = {
            "üíëüë©‚Äç‚ù§Ô∏è‚Äçüë®üë®‚Äç‚ù§Ô∏è‚Äçüë®üíë": self.abj(m),
            "üìâ": self.bbj(),
            self.su["name"]: self.cbj(m),
        }
        dff = {
            "–≤—ã–±–∏—Ä–∞–µ—Ç": self.dbj(m),
        }
        j = dff if m.mentioned and "–≤—ã–±–∏—Ä–∞–µ—Ç" in m.text else fff
        for i in (i for i in j if i in m.text.casefold()):
            await j[i]

    async def err(self, chat, cmn):
        """—Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∂–∞–±–∞–±–æ—Ç–∞"""
        async with self.client.conversation(chat, exclusive=False) as conv:
            try:
                await conv.send_message(cmn)
                global RSP
                RSP = await conv.get_response()
            except asyncio.exceptions.TimeoutError:
                txt = await conv.send_message(cmn)
                RSP = await self.client.get_messages(chat, search=" ")
            await conv.cancel_all()

    async def sacmd(self, m):
        """–±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –∂–∞–±–∞–º–∏"""
        if "auto" not in self.su:
            self.su.setdefault("auto", {})
            if "chats" in self.su:
                self.su.pop("chats")
            msg = "<b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        else:
            self.su.pop("auto")
            msg = "<b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        self.db.set("Su", "su", self.su)
        await m.edit(msg)

    async def sjcmd(self, m):
        """–≤—ã–±–æ—Ä —Ä–∞–±–æ—Ç—ã"""
        msg = m.text.split(" ", 1)[1]
        if "job" not in self.su:
            self.su.setdefault("job", msg.casefold())
        else:
            self.su["job"] = msg.casefold()
        txt = f"<b>–†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞</b> {self.su['job']}"
        await m.edit(txt)
        self.db.set("Su", "su", self.su)

    async def sncmd(self, m):
        """–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        msg = m.text.split(" ", 1)[1]
        self.su["name"] = msg.casefold()
        txt = f"üëª <code>{self.su['name']}</code> <b>—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>"
        await m.edit(txt)
        self.db.set("Su", "su", self.su)

    async def sucmd(self, m):
        """–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫"""
        reply = await m.get_reply_message()
        msg = reply.from_id if reply else int(m.text.split(" ", 1)[1])
        if msg in self.su["users"]:
            self.su["users"].remove(msg)
            txt = f"üñïüèæ {msg} <b>—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            self.su["users"].append(msg)
            txt = f"ü§ôüèæ {msg} <b>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        self.db.set("Su", "su", self.su)
        await m.edit(txt)

    async def svcmd(self, m):
        """–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫"""
        msg = m.chat_id if len(m.text) < 9 else int(m.text.split(" ", 1)[1])
        if "chats" not in self.su:
            self.su.setdefault("chats", [msg])
            txt = "—á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω"
        elif msg in self.su["chats"]:
            self.su["chats"].remove(msg)
            txt = f"üë∂üèª {msg} <b>—á–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            self.su["chats"].append(msg)
            txt = f"üë∂üèø {msg} <b>—á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        if "auto" in self.su:
            self.su.pop("auto")
        self.db.set("Su", "su", self.su)
        await m.edit(txt)

    async def watcher(self, m):
        try:
            if m.from_id in self.su["users"]:
                await self.ebj(m)
        finally:
            return


# # requires: apscheduler


#                 delta = timedelta(hours=next_food_hours, minutes=next_food_minutes)
#                 await client.send_message(chat, '–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É', schedule=delta)

#                 for number in range(5):
#                    delta += timedelta(hours=4, minutes=3)
#                    await client.send_message(chat, '–æ—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–∫—É', schedule=delta)
#                    await asyncio.sleep(1)

#                 delta = timedelta(hours=1)
#                 await client.send_message(chat, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', schedule=delta)

#                 for number in range(15):
#                    delta += timedelta(hours=1, minutes=30)
#                    await client.send_message(chat, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', schedule=delta)
#                    await asyncio.sleep(1)


#         elif m.text.startswith("/an") and m.from_user.id == self._me:
#             await self._bot.send_message(
#                 int(m.text.split(" ", 2)[1]), m.text.split(" ", 2)[2]
#             )
#             await m.answer(self.strings("sent"))
#         elif self.inline.gs(m.from_user.id) == "fb_send_message":
#             r = await self._bot.forward_message(self._me, m.chat.id, m.message_id)
#             await r.answer(m.from_user.id)
#             await m.answer(self.strings("sent"))


#         txtnorm = dict(
#             zip(
#                 map(ord, "3√´jmqv9√¥¬ß√ºld–πa¬ø42z—çou…ô√†>√Ω5e√∂$0¬°<61¬•g8t—ä7"),
#                 "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é. ?!,-:;7",
#             )
#         )
#         txte = txt.translate(txtnorm)
#         await message.client.send_message("me", txte)

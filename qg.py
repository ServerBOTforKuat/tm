# scope: inline
# scope: geektg_min 3.1.16
# scope: geektg_only


import abc
from .. import loader, utils
import logging
import time
from telethon.utils import get_display_name

from aiogram.types import Message as AiogramMessage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

logger = logging.getLogger(__name__)


@loader.tds
class FeedbackMod(loader.Module):
    """yoooh"""

    __metaclass__ = abc.ABCMeta

    strings = {
        "name": "Feedback",
        "/start": "ü§µ‚Äç‚ôÄÔ∏è <b>–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å {}. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ /nometa, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</b>\n<b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç—É.</b>",
        "/nometa": (
            "üë®‚Äçüéì <b><u>–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:</u></b>\n\n"
            "<b>üö´ –ù–µ <u>–ø–∏—à–∏—Ç–µ</u> –ø—Ä–æ—Å—Ç–æ '–ü—Ä–∏–≤–µ—Ç'</b>\n"
            "<b>üö´ –ù–µ <u>–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ</u> —Ä–µ–∫–ª–∞–º—É</b>\n"
            "<b>üö´ –ù–µ <u>–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</u> –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ</b>\n"
            "<b>üö´ –ù–µ <u>—Ä–∞–∑–±–∏–≤–∞–π—Ç–µ</u> —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n"
            "<b>‚úÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>"
        ),
        "enter_message": "‚úçÔ∏è <b>–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å</b>",
        "sent": "‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>",
    }

    def get(self, *args) -> dict:
        return self._db.get(self.strings["name"], *args)

    def set(self, *args) -> None:
        return self._db.set(self.strings["name"], *args)

    async def client_ready(self, client, db) -> None:
        self._db = db
        self._client = client
        self._me = (await client.get_me()).id
        self._name = utils.escape_html(get_display_name(await client.get_me()))

        if not hasattr(self, "inline"):
            raise Exception("GeekTG Only")

        self._bot = self.inline._bot
        self._ratelimit = {}
        self._markup = InlineKeyboardMarkup()
        self._markup.add(
            InlineKeyboardButton(
                "‚úçÔ∏è –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å", callback_data="fb_leave_message"
            )
        )

        self._cancel = InlineKeyboardMarkup()
        self._cancel.add(InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="fb_cancel"))

        self.__doc__ = (
            "Feedback bot\n"
            f"Your feeback link: t.me/{self.inline._bot_username}?start=feedback\n"
            "You can freely share it"
        )

    async def aiogram_watcher(self, message: AiogramMessage) -> None:
        if message.text == "/start feedback":
            await message.answer(
                self.strings("/start").format(self._name), reply_markup=self._markup
            )
        elif message.text == "/nometa":
            await message.answer(self.strings("/nometa"), reply_markup=self._markup)
        elif self.inline.gs(message.from_user.id) == "fb_send_message":
            await self._bot.forward_message(
                self._me, message.chat.id, message.message_id
            )
            await message.answer(self.strings("sent"))
            self._ratelimit[message.from_user.id] = time.time() + 60
            self.inline.ss(message.from_user.id, False)

    async def feedback_callback_handler(self, call: CallbackQuery) -> None:
        """
        Handles button clicks
        @allow: all
        """
        if call.data == "fb_cancel":
            self.inline.ss(call.from_user.id, False)
            await self._bot.delete_message(
                call.message.chat.id, call.message.message_id
            )
            return

        if call.data != "fb_leave_message":
            return

        if (
            call.from_user.id in self._ratelimit
            and self._ratelimit[call.from_user.id] > time.time()
        ):
            await call.answer(
                f"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {self._ratelimit[call.from_user.id] - time.time():.0f} —Å–µ–∫—É–Ω–¥",
                show_alert=True,
            )
            return

        self.inline.ss(call.from_user.id, "fb_send_message")
        await self._bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=self.strings("enter_message"),
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=self._cancel,
        )

    @loader.owner
    async def qgcmd(self, m):
        jup = ""
        for a in utils.get_args_raw(m):
            if a.lower() in alp:
                arp = alp[a.lower()]
                if a.isupper():
                    arp = arp.upper()
            else:
                arp = a
            jup += arp
        await utils.answer(m, jup)


alp = {
    "–∞": "a",
    "”ô": "√§",
    "–±": "b",
    "–≤": "v",
    "–≥": "g",
    "“ì": "ƒü",
    "–¥": "d",
    "–µ": "e",
    "–∂": "j",
    "–∑": "z",
    "–∏": "i",
    "–π": "y",
    "–∫": "k",
    "“õ": "k",
    "–ª": "l",
    "–º": "m",
    "–Ω": "n",
    "“£": "≈Ñ",
    "–æ": "o",
    "”©": "√∂",
    "–ø": "p",
    "—Ä": "r",
    "—Å": "s",
    "—Ç": "t",
    "—É": "w",
    "“±": "u",
    "“Ø": "√º",
    "—Ñ": "f",
    "—Ö": "h",
    "“ª": "h",
    "—ã": "ƒ±",
    "—ñ": "i",
    "—á": "ch",
    "—Ü": "ts",
    "—à": "c",
    "—â": "cc",
    "—ç": "e",
    "—è": "ya",
}
